import omero
import ezomero
import os
import logger
from threading import Lock
import conf
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class FileChangeHandler(FileSystemEventHandler):
    def __init__(self, file_path, progress_func):
        self.file_path = file_path
        self.last_position = 0
        self.prog_fun = progress_func

    def on_any_event(self, event):
        return #reimplement to disable debug prints

    def on_modified(self, event):
        if event.src_path == self.file_path:
            with open(self.file_path, "r") as f:
                f.seek(self.last_position)
                new_data = f.read()
                self.last_position = f.tell()
                if new_data:
                    if new_data.startswith("FILE_UPLOAD"):
                        return 
                    
                    data = new_data.split(' ')
                    ratio = 100 * (float(data[0]) / float(data[1].rstrip()))
                    self.prog_fun(int(ratio))
                

mutex = Lock()

def import_image(conn, img_path, dataset_id, meta_dict, batch_tag, progress_func):
    # import the image
    
    omeroConn = conn.get_omero_connection()
    namespace = omero.constants.metadata.NSCLIENTMAPANNOTATION
    
    done = False
    image_id = None
    rt = 0
    while not done:
        with mutex:
            file_to_watch = conf.LOG_DIR + conf.IMPORT_PROGRESS_FILE
            event_handler = FileChangeHandler(file_to_watch, progress_func)
            observer = Observer()
            observer.schedule(event_handler, path=conf.LOG_DIR, recursive=False)
            observer.start()
            was_error = False
            #we need to catch exceptions from this and probably do a retry in some way!! !! !! !! *** *** <== ==>
            try:
                image_id = ezomero.ezimport(conn=omeroConn,
                                            target=img_path,
                                            dataset=dataset_id.getId(),
                                            ann=meta_dict,
                                            ns=namespace, logback="./logback.xml")
            except Exception as e:
                logger.warning(f"ezomero.ezimport caused exception: {str(e)}. Try {rt} of {conf.IMPORT_NR_OF_RETRIES}") 
                was_error = True
        
            if image_id is None: #failed to import the image(s)
                logger.warning(f"ezomero.ezimport returned image id None. Try {rt} of {conf.IMPORT_NR_OF_RETRIES}") 
                was_error = True

            rt += 1
            done = (not was_error) or (was_error and  rt < conf.IMPORT_NR_OF_RETRIES)
            os.remove(conf.LOG_DIR + conf.IMPORT_PROGRESS_FILE)
            observer.stop()

    #all retris done...
    if image_id is None: #failed to import the image(s)
        logger.warning(f"ezomero.ezimport returned image id None after all retries") 
        raise ValueError("Failed to upload the image with ezomero. Return an empty list")
    
    #additional tags:
    batch_tag = [str(x)+' '+str(batch_tag[x]) for x in batch_tag if batch_tag[x] != 'None']
    
    #add tag in the image
    for im in image_id: #in case of dual or more image in the same (generated by CD7)
        image = conn.getImage(im)

        tags = [meta_dict['Microscope'], str(meta_dict['Lens Magnification'])+"X", meta_dict['Image type']]
        tags += batch_tag
        for tag_value in tags:
            tag_value = str(tag_value)
            conn.setAnnotationOnImage(image,tag_value)    
        
        # Add description
        if meta_dict.get('Description'):
            conn.setDescriptionOnImage(image, str(meta_dict.get('Description')))
        
        # Add comment
        if meta_dict.get("Comment"):
            conn.setCommentInImage(image,meta_dict.get("Comment"))
    
    return image_id

def check_duplicate_filename(conn, filename,dataset):
    for child in dataset.listChildren():
        if child.getName().startswith(filename):
            return True, child.getId()
        
    return False, None