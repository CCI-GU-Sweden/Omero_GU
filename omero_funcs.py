import omero
from omero.gateway import BlitzGateway, ProjectWrapper
import ezomero
import omero.rtypes
import logger
import os

def import_image(conn, img_path, dataset_id, meta_dict, batch_tag):
    # import the image
    namespace = omero.constants.metadata.NSCLIENTMAPANNOTATION
    
    image_id = ezomero.ezimport(conn=conn,
                                target=img_path,
                                dataset=dataset_id.getId(),
                                ann=meta_dict,
                                ns=namespace)
    
    if image_id is None: #failed to import the image(s)
        raise ValueError("Failed to upload the image with ezomero. Return an empty list")

    #additional tags:
    # batch_tag = [x for x in list(batch_tag.values()) if x != 'None'] #as a list, without the 'None'
    batch_tag = [str(x)+' '+str(batch_tag[x]) for x in batch_tag if batch_tag[x] != 'None']
    
    #add tag in the image
    for im in image_id: #in case of dual or more image in the same (generated by CD7)
        image = conn.getObject("Image", im)

        # logger.info(f"Can annotate the file: {image.canAnnotate()}")
        tags = [meta_dict['Microscope'], str(meta_dict['Lens Magnification'])+"X", meta_dict['Image type']]
        tags += batch_tag
        for tag_value in tags:
            tag_value = str(tag_value)
                
            tag_ann = None
            for ann in conn.getObjects("TagAnnotation", attributes={'textValue': tag_value}):
                if ann != None:
                    tag_ann = ann
            
            if not tag_ann:
                tag_ann = omero.gateway.TagAnnotationWrapper(conn)
                tag_ann.setValue(tag_value)
                tag_ann.save()
            
            try:
                image.linkAnnotation(tag_ann)
            except omero.ValidationException:
                logger.warning(f"Failed to insert the tag {tag_value} to image {im}")
        
        # Add description
        if meta_dict.get('Description'):
            image.setDescription(str(meta_dict.get('Description')))
            image.save()
        
        # Add comment
        if meta_dict.get("Comment"):
            comment_ann = omero.gateway.CommentAnnotationWrapper(conn)
            comment_ann.setValue(meta_dict.get("Comment"))
            comment_ann.save()
            image.linkAnnotation(comment_ann)
    
    return image_id

def check_duplicate_filename(conn, filename,dataset):
    for child in dataset.listChildren():
        if child.getName().startswith(filename):
            return True, child.getId()
        
    return False, None